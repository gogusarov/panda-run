{"version":3,"sources":["components/screens/GameScreen.module.css","assets/runcity.jpg","App.module.css","components/Question.js","constants/units.js","components/Radar.js","utils/formatDistance.js","constants/position.js","utils/locationObserver.js","constants/questions.js","components/screens/GameScreen.js","components/screens/StartScreen.js","App.js","serviceWorker.js","store/index.js","index.js","components/Radar.module.css"],"names":["module","exports","gameBlock","__webpack_require__","p","logo","App-header","App-link","App-logo-spin","Question","_ref","index","react_default","a","createElement","UNITS","Radar","_cn","isRightDirection","distance","className","styles","radarBlock","cn","Object","defineProperty","radar","rightDirection","concat","Math","round","formatDistance","POSITION_OPTIONS","enableHighAccuracy","timeout","maximumAge","geolocation","window","navigator","locationObserver","watchId","subscribe","onLocationChange","watchPosition","position","coords","latitude","longitude","e","console","warn","unsubscribe","clearWatch","createlocationObserver","QUESTIONS","text","Screen","state","Infinity","curLatitude","curLongitude","questionIndex","_this","props","_QUESTIONS$questionIn","questionLatitude","questionLongitude","calculateDistance","setState","toggleRadar","dispatch","this","_this$props","_this$state","onClick","Radar_Radar","Question_Question","PureComponent","GameScreen","connect","onStartClick","react","src","alt","StartScreen","App","isGameStarted","Boolean","location","hostname","match","store","createStore","on","_ref2","persistState","ReactDOM","render","context_default","Provider","value","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister","pulse"],"mappings":"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","file":"static/js/main.0eb5099b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBlock\":\"GameScreen_gameBlock__2c5dY\"};","module.exports = __webpack_public_path__ + \"static/media/runcity.bc340817.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"App_logo__1ItuU\",\"App-header\":\"App_App-header__xLkWl\",\"App-link\":\"App_App-link__3FsH9\",\"App-logo-spin\":\"App_App-logo-spin__1e7sv\"};","import React from 'react';\n\nexport const Question = ({ index }) => {\n    return (\n        <div>\n            Вопрос № {index}\n        </div>\n    )\n}","export const UNITS = {\n    M: 'm',\n    KM: 'km'\n};","import React from 'react';\nimport cn from 'classnames';\nimport { formatDistance } from '../utils/formatDistance';\n\nimport styles from './Radar.module.css';\n\nexport const Radar = ({ isRightDirection, distance }) => {\n    return (\n        <div className={styles.radarBlock}>\n            <div className={cn({\n                [styles.radar]: true,\n                [styles.rightDirection]: isRightDirection\n            })}>\n                <span className={styles.distance}>\n                    {formatDistance(distance)}\n                </span>\n            </div>\n        </div>\n    )\n};","import {UNITS} from '../constants/units';\n\nexport const formatDistance = (distance) => {\n    if (distance > 1000) {\n        return `${Math.round(distance / 100) / 10}${UNITS.KM}`;\n    } else {\n        return `${distance}${UNITS.M}`;\n    }\n};","export const POSITION_OPTIONS = {\n    enableHighAccuracy: true,\n    timeout: 15000,\n    maximumAge: 0,\n};","import { POSITION_OPTIONS } from '../constants/position';\n\nconst { navigator: { geolocation } } = window;\n\nconst createlocationObserver = () => {\n    let watchId = null;\n\n    const subscribe = (onLocationChange) => {\n        watchId = geolocation.watchPosition(\n            (position) => {\n                onLocationChange(position.coords.latitude, position.coords.longitude);\n            },\n            (e) => {\n                console.warn(e)\n            },\n            POSITION_OPTIONS\n        );\n    };\n\n    const unsubscribe = () => {\n        geolocation.clearWatch(watchId);\n    };\n\n    return {\n        subscribe,\n        unsubscribe\n    }\n};\n\nexport const locationObserver = createlocationObserver();","export const QUESTIONS = [\n    {\n        text: 'Чего кого?',\n        coords: {\n            latitude: 55.801174,\n            longitude: 37.728475,\n        }\n    }\n];","import React, { PureComponent, Fragment } from 'react';\nimport connect from 'storeon/react/connect';\nimport calculateDistance from 'dist-two-points';\n\nimport { Question } from '../Question';\nimport { Radar } from '../Radar';\nimport { locationObserver } from '../../utils/locationObserver';\nimport { QUESTIONS } from '../../constants/questions';\n\nimport styles from './GameScreen.module.css';\n\nclass Screen extends PureComponent {\n    state = {\n        distance: Infinity,\n        isRightDirection: true,\n    };\n\n    componentDidMount() {\n        locationObserver.subscribe(this.onLocationChange);\n    }\n\n    componentWillUnmount() {\n        locationObserver.unsubscribe();\n    }\n\n\n    onLocationChange = (curLatitude, curLongitude) => {\n        const { questionIndex } = this.props;\n        const { latitude: questionLatitude, longitude: questionLongitude } = QUESTIONS[questionIndex].coords;\n        const distance = calculateDistance(curLatitude, curLongitude, questionLatitude, questionLongitude);\n        const isRightDirection = distance <= this.state.distance;\n\n        this.setState({\n            isRightDirection,\n            distance\n        });\n    };\n\n    toggleRadar = () => {\n        this.props.dispatch('toggleRadar');\n    };\n\n    render() {\n        const { questionIndex, radar } = this.props;\n        const { isRightDirection, distance } = this.state;\n        \n        return (\n            <div className={styles.gameBlock}>\n                <button onClick={this.toggleRadar}>Радар</button>\n                { radar ? <Radar isRightDirection={isRightDirection} distance={distance}/> : <Question index={questionIndex} />}\n            </div>\n        );\n    }\n}\n\nexport const GameScreen = connect('radar', 'questionIndex', Screen);","import React, { Fragment, PureComponent } from 'react';\nimport connect from 'storeon/react/connect';\nimport logo from '../../assets/runcity.jpg';\nimport styles from '../../App.module.css';\n\nclass Screen extends PureComponent {\n    onStartClick = () => {\n        this.props.dispatch('startGame')\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <img src={logo} className={styles.logo} alt=\"Бегущий город\" />\n                <p>\n                    Категория &laquo;<b>Панда</b>&raquo;. Все точки даны праздничными загадками. Пешком (бегом) и на общественном транспорте.\n                </p>\n                <button onClick={this.onStartClick}>На старт!</button>\n            </Fragment>\n        );\n    }\n}\n\nexport const StartScreen = connect(Screen);","import React, {Fragment, PureComponent} from 'react';\nimport connect from 'storeon/react/connect'\nimport { GameScreen } from './components/screens/GameScreen';\nimport { StartScreen } from './components/screens/StartScreen';\n\nclass App extends PureComponent {\n  render() {\n    const { isGameStarted } = this.props;\n\n    return (\n        <Fragment>\n          {isGameStarted ? <GameScreen /> : <StartScreen/>}\n        </Fragment>\n    );\n  }\n}\n\nexport default connect('isGameStarted', App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import createStore from 'storeon';\nimport persistState from '@storeon/localstorage'\n\nconst handlers = (store) => {\n  store.on('@init', () => ({ isGameStarted: false, questionIndex: 0, radar: false, }));\n\n  store.on('toggleRadar', ({ radar }) => ({ radar: !radar}));\n\n  store.on('incrementQuestion', ({ questionIndex }) => ({ questionIndex: questionIndex + 1 }));\n\n  store.on('startGame', () => ({ isGameStarted: true }));\n};\n\nexport const store = createStore([handlers, persistState()]);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport StoreContext from 'storeon/react/context'\nimport { store } from './store';\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <App />\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radarBlock\":\"Radar_radarBlock__12xho\",\"radar\":\"Radar_radar__1IBgu\",\"pulse\":\"Radar_pulse__SRSDA\",\"rightDirection\":\"Radar_rightDirection__2Si_4\",\"distance\":\"Radar_distance__3akw3\"};"],"sourceRoot":""}