{"version":3,"sources":["constants/alerts.js","components/Alert.module.css","constants/screens.js","constants/questions.js","components/Alerts.module.css","components/screens lazy /^/.//.*$/ groupOptions: {} namespace object","components/Alert.js","utils/scheduleFrame.js","components/Alerts.js","App.js","serviceWorker.js","utils/generateId.js","store/index.js","utils/questions.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","MESSAGES","TYPES","HIDE_TIMEOUT","OFFLINE","ONLINE","RIGHT_ANSWER","WRONG_ANSWER","SUCCESS","ERROR","module","exports","alert","visible","error","success","START_SCREEN","GAME_SCREEN","FINISH_SCREEN","QUESTIONS","text","coords","latitude","longitude","answer","alertsBlock","map","./FinishScreen","./FinishScreen.js","./GameScreen","./GameScreen.js","./GameScreen.module.css","./StartScreen","./StartScreen.js","./StartScreen.module.css","webpackAsyncContext","req","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","PureAlert","state","handleTransitionEnd","_this$props","_this","props","dispatch","_this2","this","callback","_len","arguments","length","args","Array","_key","requestAnimationFrame","apply","scheduleFrame","setState","autoHide","setTimeout","_cn","_this$props2","type","react_default","a","createElement","className","cn","defineProperty","styles","onTransitionEnd","PureComponent","Alert","connect","PureAlerts","alerts","item","assign","key","Alerts","App","Screen","onNetworkOffline","onNetworkOnline","window","addEventListener","getScreen","prevProps","appScreen","removeEventListener","concat","default","react","Boolean","location","hostname","match","counter","store","createStore","on","questionIndex","radar","_ref","_ref2","screen","_ref3","_alert$autoHide","objectSpread","_ref4","filter","persistState","ReactDOM","render","context_default","Provider","value","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAO,IAAMF,EAAW,CACpBG,QAAS,gMACTC,OAAQ,kGACRC,aAAc,+FACdC,aAAc,uHAGLL,EAAQ,CACjBM,QAAS,UACTC,MAAO,SAGEN,EAAe,4BCX5BO,EAAAC,QAAA,CAAkBC,MAAA,qBAAAC,QAAA,uBAAAC,MAAA,qBAAAC,QAAA,uDCDlBjB,EAAAC,EAAAC,EAAA,sBAAAgB,IAAAlB,EAAAC,EAAAC,EAAA,sBAAAiB,IAAAnB,EAAAC,EAAAC,EAAA,sBAAAkB,IAAO,IAAMF,EAAe,cACfC,EAAc,aACdC,EAAgB,+CCF7BpB,EAAAC,EAAAC,EAAA,sBAAAmB,IAAO,IAAMA,EAAY,CACrB,CACIC,KAAM,sNACNC,OAAQ,CACJC,SAAU,UACVC,UAAW,WAEfC,OAAQ,MAEZ,CACIJ,KAAM,wJACNC,OAAQ,CACJC,SAAU,UACVC,UAAW,WAEfC,OAAQ,yBCdhBd,EAAAC,QAAA,CAAkBc,YAAA,6GCDlB,IAAAC,EAAA,CACAC,iBAAA,CACA,GACA,EACA,GAEAC,oBAAA,CACA,GACA,EACA,GAEAC,eAAA,CACA,GACA,EACA,GAEAC,kBAAA,CACA,GACA,EACA,GAEAC,0BAAA,CACA,GACA,EACA,GAEAC,gBAAA,CACA,GACA,EACA,GAEAC,mBAAA,CACA,GACA,EACA,GAEAC,2BAAA,CACA,GACA,EACA,IAGA,SAAAC,EAAAC,GACA,IAAAtC,EAAAuC,EAAAX,EAAAU,GACA,OAAAE,QAAAC,UAAAC,KAAA,WACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,IAIA,IAAAG,EAAAlB,EAAAU,GAAAS,EAAAD,EAAA,GACA,OAAA9C,EAAA2C,EAAAG,EAAA,IAAAJ,KAAA,WACA,OAAA1C,EAAAgD,EAAAD,EAAAD,EAAA,MAGAT,EAAAY,KAAA,WACA,OAAAC,OAAAD,KAAArB,IAEAS,EAAAU,GAAA,GACAnC,EAAAC,QAAAwB,sLCrDMc,6MAiBFC,MAAQ,CACJrC,SAAS,KAGbsC,oBAAsB,WAAM,IAAAC,EACCC,EAAKC,MAAtBC,EADgBH,EAChBG,SAAUV,EADMO,EACNP,GAEbQ,EAAKH,MAAMrC,SACZ0C,EAAS,YAAaV,uFAxBV,IAAAW,EAAAC,MCRK,SAACC,GAAsB,QAAAC,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,EAAA,GAAAJ,UAAAI,GAChDC,sBAAsB,kBAAMA,sBAAsB,kBAAMP,EAAQQ,WAAR,EAAYJ,ODQhEK,CAAc,WACVX,EAAKY,SAAS,CACVvD,SAAS,MAIb4C,KAAKH,MAAMe,UACXC,WAAW,WACPd,EAAKY,SAAS,CACVvD,SAAS,KAEdV,sCAgBF,IAAAoE,EAAAC,EACkBf,KAAKH,MAApBmB,EADHD,EACGC,KAAMrD,EADToD,EACSpD,KACNP,EAAY4C,KAAKP,MAAjBrC,QAER,OACI6D,EAAAC,EAAAC,cAAA,OACIC,UAAWC,KAAEP,EAAA,GAAAvB,OAAA+B,EAAA,EAAA/B,CAAAuB,EACRS,IAAOpE,OAAQ,GADPoC,OAAA+B,EAAA,EAAA/B,CAAAuB,EAERS,IAAOP,IAAQ,GAFPzB,OAAA+B,EAAA,EAAA/B,CAAAuB,EAGRS,IAAOnE,QAAUA,GAHT0D,IAKbU,gBAAiBxB,KAAKN,qBACrB/B,UAzCO8D,iBA+CXC,EAAQC,IAAQnC,oBEjDvBoC,mLACO,IACGC,EAAW7B,KAAKH,MAAhBgC,OAER,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAOvD,aAClB6D,EAAO5D,IAAI,SAAC6D,GAAD,OAAWb,EAAAC,EAAAC,cAACO,EAADnC,OAAAwC,OAAA,CAAOC,IAAKF,EAAK1C,IAAQ0C,cANvCL,iBAYZQ,EAASN,IAAQ,SAAUC,GCZlCM,6MAoBJzC,MAAQ,CACN0C,OAAQ,kBAAM,SAGhBC,iBAAmB,WACjBxC,EAAKC,MAAMC,SAAS,YAAa,CAAEkB,KAAMvE,IAAMO,MAAOW,KAAMnB,IAASG,aAGvE0F,gBAAkB,WAChBzC,EAAKC,MAAMC,SAAS,YAAa,CAAEkB,KAAMvE,IAAMM,QAASY,KAAMnB,IAASI,6FA1BvE0F,OAAOC,iBAAiB,UAAWvC,KAAKoC,kBACxCE,OAAOC,iBAAiB,SAAUvC,KAAKqC,iBAEvCrC,KAAKwC,uDAGYC,GACbA,EAAUC,YAAc1C,KAAKH,MAAM6C,WACrC1C,KAAKwC,2DAKPF,OAAOK,oBAAoB,UAAW3C,KAAKoC,kBAC3CE,OAAOK,oBAAoB,SAAU3C,KAAKqC,qDAehC,IAAAtC,EAAAC,KACF0C,EAAc1C,KAAKH,MAAnB6C,UAERrG,EAAA,GAAAA,CAAO,KAAAuG,OAAwBF,IAAa3D,KAAK,SAAC9B,GAChD8C,EAAKY,SAAS,CACZwB,OAAQlF,EAAO4F,6CAKZ,IACCV,EAAWnC,KAAKP,MAAhB0C,OAER,OACIlB,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACE7B,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACc,EAAD,cAhDQR,iBAsDHE,MAAQ,YAAaO,GC/ChBa,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,0HClBFC,EAAU,kBCuCDC,EAAQC,IAAY,CAhChB,SAACD,GAChBA,EAAME,GAAG,QAAS,iBAAO,CAAEZ,UAAWnF,IAAcgG,cAAe,EAAGC,OAAO,EAAO3B,OAAQ,MAE5FuB,EAAME,GAAG,cAAe,SAAAG,GAAA,MAAgB,CAAED,OAAlBC,EAAGD,SAE3BJ,EAAME,GAAG,oBAAqB,SAAAI,GAAuB,IAApBH,EAAoBG,EAApBH,cAG/B,GAFAH,EAAMtD,SAAS,YAAa,CAAEkB,KAAMvE,IAAMM,QAASY,KAAMnB,IAASK,eAE/C0G,ECb0B,IAAM7F,IAAU0C,ODgB3D,MAAO,CAAEmD,cAAeA,EAAgB,GAFxCH,EAAMtD,SAAS,eAAgBrC,OAMnC2F,EAAME,GAAG,eAAgB,SAAC7D,EAAOkE,GAAR,MAAoB,CAAEjB,UAAWiB,KAE1DP,EAAME,GAAG,YAAa,SAAAM,EAAazG,GAAU,IAApB0E,EAAoB+B,EAApB/B,OAAoBgC,EACf1G,EAApByD,gBADmC,IAAAiD,KAG3C,MAAO,CACLhC,OAAQA,EAAOe,OAAPrD,OAAAuE,EAAA,EAAAvE,CAAA,GAAmBpC,EAAnB,CAA0BiC,GDzB7B+D,ICyB+CvC,iBAIxDwC,EAAME,GAAG,YAAa,SAAAS,EAAa3E,GACjC,MAAO,CACLyC,OAFsCkC,EAAjBlC,OAENmC,OAAO,SAAClC,GAAD,OAAUA,EAAK1C,KAAOA,QAKN6E,IAAa,CAAC,YAAa,gBAAiB,YE/BxFC,IAASC,OACLlD,EAAAC,EAAAC,cAACiD,EAAAlD,EAAamD,SAAd,CAAuBC,MAAOlB,GAC1BnC,EAAAC,EAAAC,cAACoD,EAAD,OAEJC,SAASC,eAAe,SJqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7F,KAAK,SAAA8F,GACjCA,EAAaC","file":"static/js/main.d781c3e2.chunk.js","sourcesContent":["export const MESSAGES = {\n    OFFLINE: 'Соединение с интернетом потеряно😔',\n    ONLINE: 'Ура! Мы снова в сети',\n    RIGHT_ANSWER: 'Правильный ответ!',\n    WRONG_ANSWER: 'Неправильный ответ😔',\n};\n\nexport const TYPES = {\n    SUCCESS: 'success',\n    ERROR: 'error',\n};\n\nexport const HIDE_TIMEOUT = 3000;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__3U2GT\",\"visible\":\"Alert_visible__n6eLc\",\"error\":\"Alert_error__2Qbaa\",\"success\":\"Alert_success__1a4gf\"};","export const START_SCREEN = 'StartScreen';\nexport const GAME_SCREEN = 'GameScreen';\nexport const FINISH_SCREEN = 'FinishScreen';","export const QUESTIONS = [\n    {\n        text: 'Вопрос о смысле жизни, вселенной и вообще',\n        coords: {\n            latitude: 55.801174,\n            longitude: 37.728475,\n        },\n        answer: '42'\n    },\n    {\n        text: 'Почем нынче опиум для народа?',\n        coords: {\n            latitude: 55.752299,\n            longitude: 37.618273,\n        },\n        answer: '42'\n    }\n];","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertsBlock\":\"Alerts_alertsBlock__RirYg\"};","var map = {\n\t\"./FinishScreen\": [\n\t\t20,\n\t\t9,\n\t\t2\n\t],\n\t\"./FinishScreen.js\": [\n\t\t20,\n\t\t9,\n\t\t2\n\t],\n\t\"./GameScreen\": [\n\t\t22,\n\t\t9,\n\t\t0\n\t],\n\t\"./GameScreen.js\": [\n\t\t22,\n\t\t9,\n\t\t0\n\t],\n\t\"./GameScreen.module.css\": [\n\t\t33,\n\t\t7,\n\t\t6\n\t],\n\t\"./StartScreen\": [\n\t\t21,\n\t\t9,\n\t\t1\n\t],\n\t\"./StartScreen.js\": [\n\t\t21,\n\t\t9,\n\t\t1\n\t],\n\t\"./StartScreen.module.css\": [\n\t\t34,\n\t\t7,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 31;\nmodule.exports = webpackAsyncContext;","import React, { PureComponent } from 'react';\nimport cn from 'classnames';\nimport connect from 'storeon/react/connect';\nimport styles from './Alert.module.css';\nimport { scheduleFrame } from '../utils/scheduleFrame';\nimport { HIDE_TIMEOUT } from '../constants/alerts';\n\nclass PureAlert extends PureComponent {\n    componentDidMount() {\n        scheduleFrame(() => {\n            this.setState({\n                visible: true,\n            });\n        });\n\n        if (this.props.autoHide) {\n            setTimeout(() => {\n                this.setState({\n                    visible: false,\n                });\n            }, HIDE_TIMEOUT);\n        }\n    }\n\n    state = {\n        visible: false,\n    };\n\n    handleTransitionEnd = () => {\n        const { dispatch, id } = this.props;\n\n        if (!this.state.visible) {\n            dispatch('hideAlert', id);\n        }\n    };\n\n    render() {\n        const { type, text } = this.props;\n        const { visible } = this.state;\n\n        return (\n            <div\n                className={cn({\n                    [styles.alert]: true,\n                    [styles[type]]: true,\n                    [styles.visible]: visible,\n                })}\n                onTransitionEnd={this.handleTransitionEnd}>\n                {text}\n            </div>\n        )\n    }\n}\n\nexport const Alert = connect(PureAlert);","export const scheduleFrame = (callback, ...args) => {\n    requestAnimationFrame(() => requestAnimationFrame(() => callback(...args)));\n};","import React, { PureComponent } from 'react'\nimport connect from 'storeon/react/connect';\nimport { Alert } from './Alert';\nimport styles from './Alerts.module.css';\n\nclass PureAlerts extends PureComponent {\n    render() {\n        const { alerts } = this.props;\n\n        return (\n            <div className={styles.alertsBlock}>\n                {alerts.map((item) => (<Alert key={item.id} {...item}/>))}\n            </div>\n        );\n    }\n}\n\nexport const Alerts = connect('alerts', PureAlerts);\n\n\n\n","import React, {Fragment, PureComponent} from 'react';\nimport connect from 'storeon/react/connect';\nimport { Alerts } from './components/Alerts';\nimport { MESSAGES, TYPES } from './constants/alerts';\n\nclass App extends PureComponent {\n\n  componentDidMount() {\n    window.addEventListener('offline', this.onNetworkOffline);\n    window.addEventListener('online', this.onNetworkOnline);\n\n    this.getScreen();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.appScreen !== this.props.appScreen) {\n      this.getScreen();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('offline', this.onNetworkOffline);\n    window.removeEventListener('online', this.onNetworkOnline);\n  }\n\n  state = {\n    Screen: () => null,\n  };\n\n  onNetworkOffline = () => {\n    this.props.dispatch('showAlert', { type: TYPES.ERROR, text: MESSAGES.OFFLINE });\n  };\n\n  onNetworkOnline = () => {\n    this.props.dispatch('showAlert', { type: TYPES.SUCCESS, text: MESSAGES.ONLINE });\n  };\n\n  getScreen() {\n    const { appScreen } = this.props;\n\n    import(`./components/screens/${appScreen}`).then((module) => {\n      this.setState({\n        Screen: module.default,\n      });\n    });\n  }\n\n  render() {\n    const { Screen } = this.state;\n\n    return (\n        <Fragment>\n          <Screen />\n          <Alerts />\n        </Fragment>\n    );\n  }\n}\n\nexport default connect('appScreen', App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let counter = 0;\n\nexport const generateId = () => {\n    return counter++;\n};","import createStore from 'storeon';\nimport persistState from '@storeon/localstorage'\nimport { generateId } from '../utils/generateId';\nimport { isLastQuestion } from '../utils/questions';\nimport { MESSAGES, TYPES } from '../constants/alerts';\nimport { FINISH_SCREEN, START_SCREEN } from '../constants/screens';\n\nconst handlers = (store) => {\n  store.on('@init', () => ({ appScreen: START_SCREEN, questionIndex: 0, radar: false, alerts: [] }));\n\n  store.on('toggleRadar', ({ radar }) => ({ radar: !radar}));\n\n  store.on('incrementQuestion', ({ questionIndex }) => {\n    store.dispatch('showAlert', { type: TYPES.SUCCESS, text: MESSAGES.RIGHT_ANSWER });\n\n    if (isLastQuestion(questionIndex)) {\n      store.dispatch('changeScreen', FINISH_SCREEN);\n    } else {\n      return { questionIndex: questionIndex + 1 };\n    }\n  });\n\n  store.on('changeScreen', (state, screen) => ({ appScreen: screen }));\n\n  store.on('showAlert', ({ alerts }, alert) => {\n    const { autoHide = true } = alert;\n\n    return {\n      alerts: alerts.concat({ ...alert, id: generateId(), autoHide })\n    }\n  });\n\n  store.on('hideAlert', ({ alerts }, id) => {\n    return {\n      alerts: alerts.filter((item) => item.id !== id),\n    }\n  });\n};\n\nexport const store = createStore([handlers, persistState(['appScreen', 'questionIndex', 'radar'])]);","import { QUESTIONS } from '../constants/questions';\n\nexport const isLastQuestion = (index) => index + 1 === QUESTIONS.length;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport StoreContext from 'storeon/react/context'\nimport { store } from './store';\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <App />\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}